@using System.Diagnostics.CodeAnalysis
@using System.Globalization
@inherits InputNumber<double>

<input type="number" class="@this.CssClass" @attributes=this.AdditionalAttributes value=@this.CurrentValueAsString @oninput=OnValueChanged />

@code 
{
    [Parameter] public double Min { get; set; } = double.MinValue;
    [Parameter] public double Max { get; set; } = double.MaxValue;

    private async Task OnValueChanged(ChangeEventArgs e)
    {
        // capture the current state
        var currentValue = this.CurrentValue;
        var resetToCurrent = false;

        // Check if we need to reset the display value
        if (double.TryParse(e.Value?.ToString(), out var value))
            resetToCurrent = value < this.Min || value > this.Max;

        // Sets off the internal InputBase update process        
        this.CurrentValueAsString = e.Value?.ToString();

        if (resetToCurrent)
        {
            this.CurrentValue = value;
            StateHasChanged();

            await Task.Delay(1);
            this.CurrentValue = currentValue;
            StateHasChanged();
        }
    }

    // Normal override to covert the string value to it's correct type and add validation message if we need to.
    protected override bool TryParseValueFromString(string? value, [MaybeNullWhen(false)] out double result, [NotNullWhen(false)] out string? validationErrorMessage)
    {
        validationErrorMessage = null;

        if (double.TryParse(value, out result))
        {
            if (result < this.Min)
                validationErrorMessage = $"{DisplayName ?? FieldIdentifier.FieldName} must be greater than {this.Min}";

            if (result > this.Max)
                validationErrorMessage = $"{DisplayName ?? FieldIdentifier.FieldName} must be less than {this.Max}";
        }

        if (validationErrorMessage is not null)
            result = CurrentValue;

        return validationErrorMessage is null;
    }
}
