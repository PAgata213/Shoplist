@using ShopList.Client.Interfaces
@using ShopList.Shared.DataModels.DTOs
@using ShopList.Shared.DataModels.ShopList;
@using ShopList.Client.Helpers.Components;

@inject IShopBrandsService _shopBrandsService;
@inject IShopsService _shopsService;

<div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Modal title</h5>
            </div>
            <div class="modal-body">
                @if (shopDTOModel != null)
                {
                    <EditForm OnValidSubmit="Save" Model="@shopDTOModel">
                        <DataAnnotationsValidator/>

                        <div class="form-group row">
                            <label for="email" class="col-md-4 col-form-label">Sklep:</label>
                            <div class="col-md-10">
                                <CustomInputSelect @bind-Value="shopDTOModel.ShopBrandId" onchange="args => OnSelectionChanged(args)">
                                    <option value="0">-- Wybierz --</option>
                                    @if (ShopBrands != null)
                                    {
                                        @foreach (var shopBrand in ShopBrands)
                                        {
                                            <option value="@shopBrand.Id">@shopBrand.ShopBrandName</option>
                                        }
                                    }
                                </CustomInputSelect>
                                <ValidationMessage For="@(() => shopDTOModel.ShopBrandId)" />
                            </div>
                        </div>
                        <div class="form-group row">
                            <label for="email" class="col-md-4 col-form-label">Adres:</label>
                            <div class="col-md-10">
                                <InputText id="email" class="form-control" @bind-Value="shopDTOModel.Address" />
                                <ValidationMessage For="@(() => shopDTOModel.Address)" />
                            </div>
                        </div>
                        <div class="form-group row">
                            <label for="email" class="col-md-4 col-form-label">kod pocztowy:</label>
                            <div class="col-md-10">
                                <InputText id="email" class="form-control" @bind-Value="shopDTOModel.ZipCode" />
                                <ValidationMessage For="@(() => shopDTOModel.ZipCode)" />
                            </div>
                        </div>
                        <div class="form-group row">
                            <label for="email" class="col-md-4 col-form-label">Miasto:</label>
                            <div class="col-md-10">
                                <InputText id="email" class="form-control" @bind-Value="shopDTOModel.City" />
                                <ValidationMessage For="@(() => shopDTOModel.City)" />
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="submit" class="btn btn-success">Save</button>
                            <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => Close()">Close</button>
                        </div>
                    </EditForm>
                }
            </div>
        </div>
    </div>
</div>

@if (ShowBackdrop)
{
    <div class="modal-backdrop fade show"></div>
}

@code {
    public Guid Guid = Guid.NewGuid();
    public string ModalDisplay = "none;";
    public string ModalClass = "";
    public bool ShowBackdrop = false;

    [Parameter] public EventCallback OnSaveSuccess { get; set; }

    public ShopDTO shopDTOModel { get; set; } = new();

    private IEnumerable<ShopBrand> ShopBrands { get; set; } = Enumerable.Empty<ShopBrand>();


    public void Open()
    {
        ModalDisplay = "block;";
        ModalClass = "Show";
        ShowBackdrop = true;
        StateHasChanged();
    }

    public void Close()
    {
        ShopBrands = Enumerable.Empty<ShopBrand>();
        shopDTOModel = null;
        ModalDisplay = "none";
        ModalClass = "";
        ShowBackdrop = false;
        StateHasChanged();
    }

    protected override async void OnAfterRender(bool firstRender)
    {
        ShopBrands = await _shopBrandsService.GetShopBrandsAsync();
        base.OnAfterRender(firstRender);
    }

    private void OnSelectionChanged(ChangeEventArgs args)
    {
        var id = int.Parse(args.Value?.ToString() ?? "0");
        shopDTOModel.ShopBrandId = ShopBrands.Where(s => s.Id == id).FirstOrDefault()?.Id ?? 0;
    }

    private async Task Save()
    {
        try
        {
            if (shopDTOModel.Id == 0)
            {
                await _shopsService.CreateShopAsync(shopDTOModel);
            }
            else
            {
                await _shopsService.UpdateShopAsync(shopDTOModel);
            }
            await OnSaveSuccess.InvokeAsync();
            Close();
        }
        catch (Exception ex)
        {
        }
    }
}
