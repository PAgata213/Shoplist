@page "/productspricing"
@using ShopList.Client.DataModels;
@using ShopList.Client.Interfaces;
@using ShopList.Shared.DataModels.DTOs;
@using ShopList.Shared.DataModels.ShopList;

@inject IProductsService _productsService
@inject IShopsService _shopsService
@inject IProductsPricingService _iproductsPricingService

<h3>ProductsPricing</h3>

@if(Shops != null && Products != null)
{
	<table class="table">
		<thead>
			<tr>
				<th style="width: 10%">#</th>
				@foreach(var shop in Shops)
				{
					<th>@shop.ShopBrand.ShopBrandName</th>
				}
			</tr>
		</thead>
		<tbody>
			@foreach(var ProductForPricing in ProductForPricings)
			{
				<tr>
					<th>@ProductForPricing.Product?.ProductName</th>
					@if(ProductForPricing.InShopProductPricings != null)
					{
						@foreach(var priceInShop in ProductForPricing.InShopProductPricings)
						{
							<th>@priceInShop.Price zł</th>
						}
					}
				</tr>
			}
		</tbody>
	</table>
}
else
{
	<p><em>Loading...</em></p>
}
@code
{
	public IEnumerable<Shop> Shops { get; set; }
	public IEnumerable<Product> Products { get; set; }
	public IEnumerable<ProductForPricing> ProductForPricings { get; set; }

	protected override async Task OnInitializedAsync()
	{
		var products = await _productsService.GetProductsAsync();
		var shops = await _shopsService.GetShopsAsync();
		var pricings = await _iproductsPricingService.GetProductsPricingAsync();

		Products = products.OrderBy(p => p.ProductName);
		Shops = shops.OrderBy(s => s.Id);

		if(!products.Any() || !shops.Any())
		{
			ProductForPricings = Enumerable.Empty<ProductForPricing>();
			return;
		}

		var productForPricings = Products.Select(p => new ProductForPricing
		{
			Product = p,
			InShopProductPricings = shops.Select(s => new InShopProductPricing
			{
				ShopId = s.Id
			})
		});

		foreach(var productPricing in pricings)
		{
			var pricing = productForPricings.First(s => s.Product.Id == productPricing.ProductId).InShopProductPricings.First(s => s.ShopId == productPricing.ShopId);
			pricing.Price = productPricing.Price;
		}

		ProductForPricings = productForPricings;
	}
}
