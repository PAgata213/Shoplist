@page "/shops"

@using AutoMapper
@using ShopList.Client.Helpers
@using ShopList.Client.Interfaces
@using ShopList.Client.Modals
@using ShopList.Shared
@using ShopList.Shared.DataModels.DTOs
@using ShopList.Shared.DataModels.ShopList

@inject IShopsService _shopsService
@inject IMapper _mapper

<h3>Shops</h3>

<PageTitle>Sklepy</PageTitle>

@if (_shopsList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-hover">
        <thead>
            <tr>
                <th scope="col">Id</th>
                <th scope="col">Nazwa sklepu</th>
                <th scope="col">Miasto</th>
                <th scope="col">Adres</th>
                <th scope="col">Kod pocztowy</th>
                <th scope="col"></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var shop in _shopsList)
            {
                <ShopList.Client.Pages.Rows.ShopRow RowState="@shop"
                                            RowSelectionChanged="@OnRowStateChanged"
                                            RowDeleteClicked="@DeleteShop"
                                            RowEditClicked="@EditShop" />
            }
        </tbody>
    </table>
}

<ShopList.Client.Modals.AddShopModal @ref="shopModal"
                                     OnSaveSuccess="Refresh" />

<button type="button" class="btn btn-primary" @onclick="() => OpenShopModal()">New Shop</button>

@code {
    private ShopList.Client.Modals.AddShopModal shopModal { get; set; }

    private IEnumerable<RowState<Shop>> _shopsList;

    protected override async Task OnInitializedAsync()
    {
        await Refresh();
    }

    private async Task Refresh()
    {
        var shops = await _shopsService.GetShopsAsync();
        _shopsList = shops.Select(s => new RowState<Shop> { Item = s });
    }

    private void OpenShopModal(Shop shop = null)
    {
        shopModal.shopDTOModel = _mapper.Map<ShopDTO>(shop ?? new());
        shopModal.Open();
    }

    private async Task DeleteShop(Shop shop)
    {
        var result = await _shopsService.RemoveShopAsync(shop);
        if (result)
        {
            await Refresh();
        }
    }

    private async Task EditShop(Shop shop)
    {
        OpenShopModal(shop);
    }

    private void OnRowStateChanged(RowState<Shop> rowState)
    {
        //if (rowState.IsSelected)
        //{
        //    return;
        //}

        //var item = _rowsShopsList.FirstOrDefault(s => s.IsSelected && s.Item.Id != rowState.Item.Id);
        //if (item.IsSelected)
        //{
        //    item.IsSelected = false;
        //}
    }
}
